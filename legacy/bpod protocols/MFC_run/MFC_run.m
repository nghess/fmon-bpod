AOut.OutputRange='0V:5V'; %end % min to max range (options in BpodWavePlayer)
AOut.SamplingRate = 1000;% set to 1000 Hz
AOut.TriggerMode='Master'; %Normal, Master, or Toggle
AOut.LoopDuration = [7200 7200 7200 7200]; %must be set to a finite number to allow for looping (continuous output)
AOut.LoopMode = {'On';'On';'On';'On'}; 

%Create Analog Out object
AOut = BpodWavePlayer(BpodSystem.ModuleUSB.WavePlayer1); 

%load 5 different voltages to WavePlayer
AOut.loadWaveform(1, ones(1, 1000)*(0.5));
AOut.loadWaveform(2, ones(1, 1000)*(1.0));
AOut.loadWaveform(3, ones(1, 1000)*(1.5));
AOut.loadWaveform(4, ones(1, 1000)*(2.0));
AOut.loadWaveform(5, ones(1, 1000)*(2.5));

for currentTrial = 1:100 %S.GUI.MaxTrials
    disp(currentTrial);
    % S = BpodParameterGUI('sync', S); % Sync parameters with BpodParameterGUI plugin
    LoadSerialMessages('WavePlayer1', {['P' 15 0],['P' 15 1], ['P' 15 2], ['P' 15 3], ['P' 15 4], ['P' 15 5], ['X']});
    
    sma = NewStateMachine();
    
    sma = AddState(sma, 'Name', 'PlaySound1', ...
        'Timer', 3,...
        'StateChangeConditions', {'Tup', 'StopSound1'},...
        'OutputActions', {'WavePlayer1', 1}); % Sends serial message 1 - 0.0V
    sma = AddState(sma, 'Name', 'StopSound1', ...
        'Timer', 1,...
        'StateChangeConditions', {'Tup', 'PlaySound2'},...
        'OutputActions', {'WavePlayer1', 7}); % Sends serial message 1
    sma = AddState(sma, 'Name', 'PlaySound2', ...
        'Timer', 3,...
        'StateChangeConditions', {'Tup', 'StopSound2'},...
        'OutputActions', {'WavePlayer1', 2}); % Sends serial message 1 - 1.0V
    sma = AddState(sma, 'Name', 'StopSound2', ...
        'Timer', 1,...
        'StateChangeConditions', {'Tup', 'PlaySound3'},...
        'OutputActions', {'WavePlayer1', 7}); % Sends serial message 1
    
    sma = AddState(sma, 'Name', 'PlaySound3', ...
        'Timer', 3,...
        'StateChangeConditions', {'Tup', 'StopSound3'},...
        'OutputActions', {'WavePlayer1', 5}); % Sends serial message 1 - 2.50V
    sma = AddState(sma, 'Name', 'StopSound3', ...
        'Timer', 1,...
        'StateChangeConditions', {'Tup', 'PlaySound4'},...
        'OutputActions', {'WavePlayer1', 7}); % Sends serial message 1
    sma = AddState(sma, 'Name', 'PlaySound4', ...
        'Timer', 3,...
        'StateChangeConditions', {'Tup', 'StopSound4'},...
        'OutputActions', {'WavePlayer1', 4}); % Sends serial message 1 - 2.0V
    sma = AddState(sma, 'Name', 'StopSound4', ...
        'Timer', 1,...
        'StateChangeConditions', {'Tup', 'PlaySound5'},...
        'OutputActions', {'WavePlayer1', 7}); % Sends serial message 1
    
    sma = AddState(sma, 'Name', 'PlaySound5', ...
        'Timer', 3,...
        'StateChangeConditions', {'Tup', 'StopSound5'},...
        'OutputActions', {'WavePlayer1', 3}); % Sends serial message 1 - 1.5V
    sma = AddState(sma, 'Name', 'StopSound5', ...
        'Timer', 1,...
        'StateChangeConditions', {'Tup', 'exit'},...
        'OutputActions', {'WavePlayer1', 7}); % Sends serial message 1

    SendStateMatrix(sma); % Send state machine to the Bpod state machine device
    RawEvents = RunStateMatrix; % Run the trial and return events
%     S.GUI.CurrentTrial = S.GUI.CurrentTrial+1;
    
    %--- This final block of code is necessary for the Bpod console's pause and stop buttons to work
    HandlePauseCondition; % Checks to see if the protocol is paused. If so, waits until user resumes.
    if BpodSystem.Status.BeingUsed == 0
        return
    end
end
AOut.stop()
clear AOut